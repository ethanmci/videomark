#!/bin/bash
set -euo pipefail

APP_NAME=WebVideoMark
VERSION=$(node -pe 'require("./package.json").version')
EXTENSION_ZIP=webvideomark-safari-extension.zip

PUBLISH_DIR=dist/safari
PROJECT_DIR=${PUBLISH_DIR}/${APP_NAME}
DERIVED_DIR=${PUBLISH_DIR}/derived
PRODUCT_DIR=${DERIVED_DIR}/Build/Products/Release

log() {
  echo "$0:" "$@"
}

cd -- "$(dirname -- "$0")/.."

log "Working directory is: $(pwd)"
log "BUILD START: webvideomark-safari-extension"

log cleanup
rm -vrf -- "${PUBLISH_DIR}"

log build
echo yes | xcrun safari-web-extension-converter --copy-resources --no-open --project-location "${PUBLISH_DIR}" --app-name ${APP_NAME} dist/production

plutil -replace "CFBundleShortVersionString" -string "${VERSION}" "${PROJECT_DIR}/${APP_NAME}/Info.plist"
plutil -replace "CFBundleVersion"            -string "${VERSION}" "${PROJECT_DIR}/${APP_NAME}/Info.plist"
plutil -replace "CFBundleShortVersionString" -string "${VERSION}" "${PROJECT_DIR}/${APP_NAME} Extension/Info.plist"
plutil -replace "CFBundleVersion"            -string "${VERSION}" "${PROJECT_DIR}/${APP_NAME} Extension/Info.plist"

xcodebuild -project "${PROJECT_DIR}/${APP_NAME}.xcodeproj" -scheme ${APP_NAME} -configuration Release -derivedDataPath "${DERIVED_DIR}" build

(cd -- "${PRODUCT_DIR}" && zip -r ${EXTENSION_ZIP} "${APP_NAME} Extension.appex" ${APP_NAME}.app)
mv "${PRODUCT_DIR}/${EXTENSION_ZIP}" dist

log "BUILD END: webvideomark-safari-extension"
